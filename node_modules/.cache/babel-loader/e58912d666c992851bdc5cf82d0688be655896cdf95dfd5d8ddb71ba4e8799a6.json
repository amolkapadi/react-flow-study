{"ast":null,"code":"var _jsxFileName = \"D:\\\\ReactFlow\\\\my-app\\\\src\\\\UpdateNode\\\\DemoUpdate.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport ReactFlow, { useNodesState, useEdgesState } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport './updatenode.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: '1',\n  data: {\n    label: '-'\n  },\n  position: {\n    x: 100,\n    y: 100\n  }\n}, {\n  id: '2',\n  data: {\n    label: '-'\n  },\n  position: {\n    x: 100,\n    y: 200\n  }\n}];\nconst DemoUpdate = () => {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [nodeName, setNodeName] = useState('Node 1');\n  const [nodeNames, setNodeNames] = useState('node 2');\n  useEffect(() => {\n    setNodes(nds => nds.map(node => {\n      if (node.id === '1') {\n        node.data = {\n          ...node.data,\n          label: nodeName\n        };\n      }\n      return node;\n    }));\n  }, [nodeName, setNodes]);\n  useEffect(() => {\n    setNodes(nds => nds.map(node => {\n      if (node.id === '2') {\n        node.data = {\n          ...node.data,\n          label: nodeNames\n        };\n      }\n      return node;\n    }));\n  }, [nodeNames, setNodes]);\n  return /*#__PURE__*/_jsxDEV(ReactFlow, {\n    nodes: nodes,\n    edges: edges,\n    onNodesChange: onNodesChange,\n    onEdgesChange: onEdgesChange,\n    minZoom: 0.2,\n    maxZoom: 4,\n    attributionPosition: \"bottom-left\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"updatenode__controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"label:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: nodeName,\n        onChange: evt => setNodeName(evt.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"label:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: nodeNames,\n        onChange: evt => setNodeNames(evt.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(DemoUpdate, \"Y3TFydf2nWsQvsorE8XDH1mTYwc=\", false, function () {\n  return [useNodesState];\n});\n_c = DemoUpdate;\nexport default DemoUpdate;\nvar _c;\n$RefreshReg$(_c, \"DemoUpdate\");","map":{"version":3,"names":["React","useEffect","useState","ReactFlow","useNodesState","useEdgesState","initialNodes","id","data","label","position","x","y","DemoUpdate","nodes","setNodes","onNodesChange","nodeName","setNodeName","nodeNames","setNodeNames","nds","map","node","edges","onEdgesChange","evt","target","value"],"sources":["D:/ReactFlow/my-app/src/UpdateNode/DemoUpdate.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport ReactFlow, { useNodesState, useEdgesState } from 'reactflow';\r\nimport 'reactflow/dist/style.css';\r\n\r\nimport './updatenode.css';\r\n\r\nconst initialNodes = [\r\n  { id: '1', data: { label: '-' }, position: { x: 100, y: 100 } },\r\n  { id: '2', data: { label: '-' }, position: { x: 100, y: 200 } },\r\n];\r\n\r\n\r\nconst DemoUpdate = () => {\r\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\r\n\r\n  const [nodeName, setNodeName] = useState('Node 1');\r\n  const [nodeNames,setNodeNames]=useState('node 2')\r\n\r\n  useEffect(() => {\r\n    setNodes((nds) =>\r\n      nds.map((node) => {\r\n        if (node.id === '1') {\r\n         \r\n          node.data = {\r\n            ...node.data,\r\n            label: nodeName,\r\n          };\r\n        }\r\n\r\n        return node;\r\n      })\r\n    );\r\n  }, [nodeName, setNodes]);\r\n\r\n  useEffect(() => {\r\n    setNodes((nds) =>\r\n      nds.map((node) => {\r\n        if (node.id === '2') {\r\n         \r\n          node.data = {\r\n            ...node.data,\r\n            label: nodeNames,\r\n          };\r\n        }\r\n\r\n        return node;\r\n      })\r\n    );\r\n  }, [nodeNames, setNodes]);\r\n\r\n  \r\n\r\n  return (\r\n    <ReactFlow\r\n      nodes={nodes}\r\n      edges={edges}\r\n      onNodesChange={onNodesChange}\r\n      onEdgesChange={onEdgesChange}\r\n      minZoom={0.2}\r\n      maxZoom={4}\r\n      attributionPosition=\"bottom-left\"\r\n    >\r\n      <div className=\"updatenode__controls\">\r\n        <label>label:</label>\r\n        <input value={nodeName} onChange={(evt) => setNodeName(evt.target.value)} />\r\n        <br /><br />\r\n        <label>label:</label>\r\n        <input value={nodeNames} onChange={(evt) => setNodeNames(evt.target.value)} />\r\n\r\n     \r\n      </div>\r\n    </ReactFlow>\r\n  );\r\n};\r\n\r\nexport default DemoUpdate;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}