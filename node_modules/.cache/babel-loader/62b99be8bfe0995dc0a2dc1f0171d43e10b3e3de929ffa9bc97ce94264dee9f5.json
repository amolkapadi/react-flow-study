{"ast":null,"code":"var _jsxFileName = \"D:\\\\ReactFlow\\\\my-app\\\\src\\\\DragandDrop\\\\DnDFlow.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport ReactFlow, { ReactFlowProvider, addEdge, useNodesState, useEdgesState, Controls } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport Sidebar from './Sidebar';\nimport './style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialNodes = [{\n  id: '1',\n  data: {\n    label: '-'\n  },\n  position: {\n    x: 100,\n    y: 100\n  }\n}, {\n  id: '2',\n  data: {\n    label: 'Node 2'\n  },\n  position: {\n    x: 100,\n    y: 200\n  }\n}];\nlet id = 0;\nconst getId = () => `dndnode_${id++}`;\nconst DnDFlow = () => {\n  _s();\n  const reactFlowWrapper = useRef(null);\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [reactFlowInstance, setReactFlowInstance] = useState(null);\n\n  //2\n  const [nodeName, setNodeName] = useState(nodes);\n  console.log(nodeName);\n  const onConnect = useCallback(params => setEdges(eds => addEdge(params, eds)), []);\n  const onDragOver = useCallback(event => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  }, []);\n  const onDrop = useCallback(event => {\n    event.preventDefault();\n    const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\n    const type = event.dataTransfer.getData('application/reactflow');\n    if (typeof type === 'undefined' || !type) {\n      return;\n    }\n    const position = reactFlowInstance.project({\n      x: event.clientX - reactFlowBounds.left,\n      y: event.clientY - reactFlowBounds.top\n    });\n    const newNode = {\n      id: getId(),\n      type,\n      position,\n      data: {\n        label: `${type} node`\n      }\n    };\n    setNodes(nds => nds.concat(newNode));\n  }, [reactFlowInstance]);\n  //1update\n  useEffect(() => {\n    setNodes(nds => nds.map(node => {\n      if (node.id === '1') {\n        node.data = {\n          ...node.data,\n          label: nodes\n        };\n      }\n      return node;\n    }));\n  }, [nodeName, setNodes]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dndflow\",\n    children: /*#__PURE__*/_jsxDEV(ReactFlowProvider, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"updatenode__controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"label:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          value: nodeName,\n          onChange: evt => setNodeName(evt.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reactflow-wrapper\",\n        ref: reactFlowWrapper,\n        children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n          nodes: nodes,\n          edges: edges,\n          onNodesChange: onNodesChange,\n          onEdgesChange: onEdgesChange,\n          onConnect: onConnect,\n          onInit: setReactFlowInstance,\n          onDrop: onDrop,\n          onDragOver: onDragOver,\n          fitView: true,\n          children: /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s(DnDFlow, \"IXCahAOMxzOglRRcyDzQiWJi5lA=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = DnDFlow;\nexport default DnDFlow;\nvar _c;\n$RefreshReg$(_c, \"DnDFlow\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","ReactFlow","ReactFlowProvider","addEdge","useNodesState","useEdgesState","Controls","Sidebar","initialNodes","id","data","label","position","x","y","getId","DnDFlow","reactFlowWrapper","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","reactFlowInstance","setReactFlowInstance","nodeName","setNodeName","console","log","onConnect","params","eds","onDragOver","event","preventDefault","dataTransfer","dropEffect","onDrop","reactFlowBounds","current","getBoundingClientRect","type","getData","project","clientX","left","clientY","top","newNode","nds","concat","map","node","evt","target","value"],"sources":["D:/ReactFlow/my-app/src/DragandDrop/DnDFlow.js"],"sourcesContent":["import React, { useState, useEffect,useRef, useCallback } from 'react';\r\nimport ReactFlow, {\r\n  ReactFlowProvider,\r\n  addEdge,\r\n  useNodesState,\r\n  useEdgesState,\r\n  Controls,\r\n} from 'reactflow';\r\nimport 'reactflow/dist/style.css';\r\n\r\nimport Sidebar from './Sidebar';\r\n\r\nimport './style.css';\r\n\r\nconst initialNodes = [\r\n  { id: '1', data: { label: '-' }, position: { x: 100, y: 100 } },\r\n  { id: '2', data: { label: 'Node 2' }, position: { x: 100, y: 200 } },\r\n];\r\n\r\nlet id = 0;\r\nconst getId = () => `dndnode_${id++}`;\r\n\r\nconst DnDFlow = () => {\r\n  const reactFlowWrapper = useRef(null);\r\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\r\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\r\n  const [reactFlowInstance, setReactFlowInstance] = useState(null);\r\n \r\n  //2\r\n  const [nodeName, setNodeName] = useState(nodes);\r\n  console.log(nodeName)\r\n  const onConnect = useCallback((params) => setEdges((eds) => addEdge(params, eds)), []);\r\n\r\n  const onDragOver = useCallback((event) => {\r\n    event.preventDefault();\r\n    event.dataTransfer.dropEffect = 'move';\r\n  }, []);\r\n    \r\n  const onDrop = useCallback(\r\n    (event) => {\r\n      event.preventDefault();\r\n\r\n      const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\r\n      const type = event.dataTransfer.getData('application/reactflow');\r\n      if (typeof type === 'undefined' || !type) {\r\n        return;\r\n      }\r\n      const position = reactFlowInstance.project({\r\n        x: event.clientX - reactFlowBounds.left,\r\n        y: event.clientY - reactFlowBounds.top,\r\n      });\r\n      const newNode = {\r\n        id: getId(),\r\n        type,\r\n        position,\r\n        data: { label: `${type} node` },\r\n      };\r\n      setNodes((nds) => nds.concat(newNode));\r\n    },\r\n    [reactFlowInstance]\r\n  );\r\n    //1update\r\n    useEffect(() => {\r\n      setNodes((nds) =>\r\n        nds.map((node) => {\r\n          if (node.id === '1') {\r\n           \r\n            node.data = {\r\n              ...node.data,\r\n              label: nodes,\r\n            };\r\n          }\r\n          return node;\r\n        })\r\n      );\r\n    }, [nodeName, setNodes]);\r\n  return (\r\n    <div className=\"dndflow\">\r\n       \r\n      <ReactFlowProvider>\r\n      <div className=\"updatenode__controls\">\r\n        <label>label:</label>\r\n        <input value={nodeName} onChange={(evt) => setNodeName(evt.target.value)}/>\r\n        </div>\r\n        <div className=\"reactflow-wrapper\" ref={reactFlowWrapper}>\r\n          <ReactFlow\r\n            nodes={nodes}\r\n            edges={edges}\r\n            onNodesChange={onNodesChange}\r\n            onEdgesChange={onEdgesChange}\r\n            onConnect={onConnect}\r\n            onInit={setReactFlowInstance}\r\n            onDrop={onDrop}\r\n            onDragOver={onDragOver}\r\n            fitView\r\n          >\r\n            <Controls />\r\n          </ReactFlow>\r\n        </div>\r\n        <Sidebar />\r\n      </ReactFlowProvider>\r\n    \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DnDFlow;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}