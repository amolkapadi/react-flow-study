{"ast":null,"code":"var _jsxFileName = \"D:\\\\ReactFlow\\\\my-app\\\\src\\\\Reactflow\\\\DndReactFlow.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useCallback } from 'react';\nimport ReactFlow, { ReactFlowProvider, addEdge, useNodesState, useEdgesState, Controls } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport Sidebar from './Sidebar';\nimport './style.css';\nimport ShapeNode from '../';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {\n  shape: ShapeNode\n};\nconst initialNodes = [{\n  id: '1',\n  type: 'input',\n  data: {\n    label: 'input node'\n  },\n  position: {\n    x: 250,\n    y: 5\n  }\n}];\nlet id = 0;\nconst getId = () => `dndnode_${id++}`;\nconst DndReactFlow = () => {\n  _s();\n  const reactFlowWrapper = useRef(null);\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n  const [reactFlowInstance, setReactFlowInstance] = useState(null);\n\n  // //update Node \n  // const [editValue, setEditValue] = useState(nodes.data)\n  // const [id, setId] = useState()\n\n  // //edit function\n  // const onNodeClick = (e, val) => {\n  //   setEditValue(val.data.label)\n  //   setId(val.id)\n\n  // }\n  // //handle Change\n  // const handleChange=(e)=>{\n  //     e.preventDefault();\n  //   setEditValue( e.target.value);\n  // }\n  // //handle Function\n  // const handleEdit =()=>{\n  //   const res=nodes.map((item)=>{\n  //     if(item.id===id){\n  //       item.data={\n  //         ...item.data,\n  //         label:editValue\n  //       }\n  //     }\n  //     return item\n  //   })\n  //   setNodes(res)\n  //   setEditValue('')\n  // }\n\n  const onConnect = useCallback(params => setEdges(eds => addEdge(params, eds)), []);\n  const onDragOver = useCallback(event => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  }, []);\n  const onDrop = useCallback(event => {\n    event.preventDefault();\n    const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\n    const type = event.dataTransfer.getData('application/reactflow');\n\n    // check if the dropped element is valid\n    if (typeof type === 'undefined' || !type) {\n      return;\n    }\n    const position = reactFlowInstance.project({\n      x: event.clientX - reactFlowBounds.left,\n      y: event.clientY - reactFlowBounds.top\n    });\n    const newNode = {\n      id: getId(),\n      type,\n      position,\n      data: {\n        label: `${type} node`\n      }\n    };\n    setNodes(nds => nds.concat(newNode));\n  }, [reactFlowInstance]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dndflow\",\n    children: /*#__PURE__*/_jsxDEV(ReactFlowProvider, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reactflow-wrapper\",\n        ref: reactFlowWrapper,\n        children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n          nodes: nodes,\n          edges: edges\n          // onNodeClick={(e, val) => onNodeClick(e, val)}\n          ,\n          onNodesChange: onNodesChange,\n          onEdgesChange: onEdgesChange,\n          onConnect: onConnect,\n          onInit: setReactFlowInstance,\n          onDrop: onDrop,\n          onDragOver: onDragOver,\n          fitView: true,\n          children: /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n_s(DndReactFlow, \"s1hu1oC/LcvmYaDaAbQjcY1Q9fQ=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = DndReactFlow;\nexport default DndReactFlow;\nvar _c;\n$RefreshReg$(_c, \"DndReactFlow\");","map":{"version":3,"names":["React","useState","useRef","useCallback","ReactFlow","ReactFlowProvider","addEdge","useNodesState","useEdgesState","Controls","Sidebar","ShapeNode","nodeTypes","shape","initialNodes","id","type","data","label","position","x","y","getId","DndReactFlow","reactFlowWrapper","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","reactFlowInstance","setReactFlowInstance","onConnect","params","eds","onDragOver","event","preventDefault","dataTransfer","dropEffect","onDrop","reactFlowBounds","current","getBoundingClientRect","getData","project","clientX","left","clientY","top","newNode","nds","concat"],"sources":["D:/ReactFlow/my-app/src/Reactflow/DndReactFlow.js"],"sourcesContent":["import React, { useState, useRef, useCallback } from 'react';\r\nimport ReactFlow, {\r\n  ReactFlowProvider,\r\n  addEdge,\r\n  useNodesState,\r\n  useEdgesState,\r\n  Controls,\r\n} from 'reactflow';\r\nimport 'reactflow/dist/style.css';\r\n\r\nimport Sidebar from './Sidebar';\r\n\r\nimport './style.css';\r\n\r\nimport ShapeNode from '../';\r\n\r\nconst nodeTypes = {\r\n  shape: ShapeNode,\r\n};\r\n\r\n\r\nconst initialNodes = [\r\n  {\r\n    id: '1',\r\n    type: 'input',\r\n    data: { label: 'input node' },\r\n    position: { x: 250, y: 5 },\r\n  },\r\n];\r\n\r\nlet id = 0;\r\nconst getId = () => `dndnode_${id++}`;\r\n\r\nconst DndReactFlow = () => {\r\n  const reactFlowWrapper = useRef(null);\r\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\r\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\r\n  const [reactFlowInstance, setReactFlowInstance] = useState(null);\r\n\r\n  // //update Node \r\n  // const [editValue, setEditValue] = useState(nodes.data)\r\n  // const [id, setId] = useState()\r\n\r\n  // //edit function\r\n  // const onNodeClick = (e, val) => {\r\n  //   setEditValue(val.data.label)\r\n  //   setId(val.id)\r\n\r\n  // }\r\n  // //handle Change\r\n  // const handleChange=(e)=>{\r\n  //     e.preventDefault();\r\n  //   setEditValue( e.target.value);\r\n  // }\r\n  // //handle Function\r\n  // const handleEdit =()=>{\r\n  //   const res=nodes.map((item)=>{\r\n  //     if(item.id===id){\r\n  //       item.data={\r\n  //         ...item.data,\r\n  //         label:editValue\r\n  //       }\r\n  //     }\r\n  //     return item\r\n  //   })\r\n  //   setNodes(res)\r\n  //   setEditValue('')\r\n  // }\r\n\r\n  const onConnect = useCallback((params) => setEdges((eds) => addEdge(params, eds)), []);\r\n\r\n  const onDragOver = useCallback((event) => {\r\n    event.preventDefault();\r\n    event.dataTransfer.dropEffect = 'move';\r\n  }, []);\r\n\r\n  const onDrop = useCallback(\r\n    (event) => {\r\n      event.preventDefault();\r\n\r\n      const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\r\n      const type = event.dataTransfer.getData('application/reactflow');\r\n\r\n      // check if the dropped element is valid\r\n      if (typeof type === 'undefined' || !type) {\r\n        return;\r\n      }\r\n\r\n      const position = reactFlowInstance.project({\r\n        x: event.clientX - reactFlowBounds.left,\r\n        y: event.clientY - reactFlowBounds.top,\r\n      });\r\n      const newNode = {\r\n        id: getId(),\r\n        type,\r\n        position,\r\n        data: { label: `${type} node` },\r\n      };\r\n\r\n      setNodes((nds) => nds.concat(newNode));\r\n    },\r\n    [reactFlowInstance]\r\n  );\r\n\r\n  return (\r\n    <div className=\"dndflow\">\r\n      {/* <div className=\"updatenode__controls\">\r\n\r\n        <label>label:</label><br />\r\n        <input type=\"text\" value={editValue} onChange={handleChange} /> <br />\r\n        <button onClick={handleEdit} className=\"btn\">Update</button>\r\n      </div> */}\r\n\r\n      <ReactFlowProvider>\r\n        <div className=\"reactflow-wrapper\" ref={reactFlowWrapper}>\r\n          <ReactFlow\r\n            nodes={nodes}\r\n            edges={edges}\r\n            // onNodeClick={(e, val) => onNodeClick(e, val)}\r\n            onNodesChange={onNodesChange}\r\n            onEdgesChange={onEdgesChange}\r\n            onConnect={onConnect}\r\n            onInit={setReactFlowInstance}\r\n            onDrop={onDrop}\r\n            onDragOver={onDragOver}\r\n            fitView\r\n          >\r\n            <Controls />\r\n          </ReactFlow>\r\n        </div>\r\n        <Sidebar />\r\n      </ReactFlowProvider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DndReactFlow;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}